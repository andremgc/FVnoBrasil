y='Fração do total de unidades instaladas') +
theme_classic() +
scale_y_continuous(expand = c(0.0,0)) +
facet_grid(.~key, labeller = labeller(key = key.labs),
scales = "free") +
theme(panel.spacing = unit(2, "lines"))
p
p <- ggplot(DinamicaEstados, aes(x=mes, y=value)) +
geom_line(aes(color = uf)) +
scale_x_date(expand = c(0,0), limits = c(ymd('2016-01-01'),
ymd('2020-01-01')))+
labs (fill = "UF", x= 'Ano',
y='Fração do total de unidades instaladas') +
# theme_classic() +
scale_y_continuous(expand = c(0.0,0)) +
facet_grid(.~key, labeller = labeller(key = key.labs),
scales = "free") +
theme(panel.spacing = unit(2, "lines"))
gp <- ggplotly(p)
p
p <- ggplot(DinamicaEstados, aes(x=mes, y=value)) +
geom_line(aes(color = uf)) +
scale_x_date(expand = c(0,0), limits = c(ymd('2016-01-01'),
ymd('2020-01-01')))+
labs (fill = "UF", x= 'Ano',
y='Fração do total de unidades instaladas') +
# theme_classic() +
scale_y_continuous(expand = c(0.0,0)) +
facet_wrap(~key, labeller = labeller(key = key.labs),
scales = "free") +
theme(panel.spacing = unit(2, "lines"))
p
devtools::install_github("rstudio/blogdown")
knitr::opts_chunk$set(echo = F, message =F, warning = F, fig.width = 8)
# Definir o diretório de trabalho como o pai
#(dado que os relatorios encontram-se na subpasta Reports)
knitr::opts_knit$set(root.dir = '..')
ANEELCEP <- readRDS( "./Data/ANEELCEP.RDS") %>%
mutate(potencia_instalada_k_w =
str_replace_all(potencia_instalada_k_w,"\\.","") %>%
str_replace_all(",",".")  %>%
as.numeric())
suppressPackageStartupMessages({
require("httr", quietly = TRUE, warn.conflicts = FALSE)
require("xml2", quietly = TRUE, warn.conflicts = FALSE)
require("rvest", quietly = TRUE, warn.conflicts = FALSE)
require("janitor", quietly = TRUE, warn.conflicts = FALSE)
require("stringi", quietly = TRUE, warn.conflicts = FALSE)
require("tidyverse", quietly = TRUE, warn.conflicts = FALSE)
require("readr", quietly = TRUE, warn.conflicts = FALSE)
require("stringr", quietly = TRUE, warn.conflicts = FALSE)
require("lubridate", quietly = TRUE, warn.conflicts = FALSE)
require("plotly", quietly = TRUE, warn.conflicts = FALSE)
require("gridExtra", quietly = TRUE, warn.conflicts = FALSE)
})
uf <- readRDS( "./Data/Subsistemas.RDS")$uf
ANEELCEP <- readRDS( "./Data/ANEELCEP.RDS") %>%
mutate(potencia_instalada_k_w =
str_replace_all(potencia_instalada_k_w,"\\.","") %>%
str_replace_all(",",".")  %>%
as.numeric())
View(ANEELCEP)
Cidades <- ANEELCEP %>% filter(tipo =="UFV" & classe == 'Residencial') %>%
group_by(municipio) %>%
summarise(potencia_instalada = sum(potencia_instalada_k_w)/1000,
unidades_instaladas = n())
View(Cidades)
?top_n
Cidades <- ANEELCEP %>% filter(tipo =="UFV" & classe == 'Residencial') %>%
group_by(municipio) %>%
summarise(unidades_instaladas = n(),
potencia_instalada = sum(potencia_instalada_k_w)/1000,
) %>%
arrange(unidades_instaladas) %>%
top_n(10)
View(Cidades)
Cidades <- ANEELCEP %>% filter(tipo =="UFV" & classe == 'Residencial') %>%
group_by(municipio) %>%
summarise(unidades_instaladas = n(),
potencia_instalada = sum(potencia_instalada_k_w)/1000,
) %>%
arrange(unidades_instaladas)
View(Cidades)
Cidades <- ANEELCEP %>% filter(tipo =="UFV" & classe == 'Residencial') %>%
group_by(municipio) %>%
summarise(unidades_instaladas = n(),
potencia_instalada = sum(potencia_instalada_k_w)/1000,
) %>%
arrange(desc(unidades_instaladas))
View(Cidades)
Cidades <- ANEELCEP %>% filter(tipo =="UFV" & classe == 'Residencial') %>%
group_by(municipio) %>%
summarise(unidades_instaladas = n(),
potencia_instalada = sum(potencia_instalada_k_w)/1000,
) %>%
arrange(desc(unidades_instaladas)) %>%
top_n(10, unidades_instaladas)
View(Cidades)
View(ANEELCEP)
# Define funcao para resolver possiveis problemas com os nomes
OperaNomes <- function(Nomes) {
Nomes <- str_to_upper(Nomes) %>%
iconv ( from="UTF-8",to="ASCII//TRANSLIT") %>%
# Remove espacos sobrando
str_replace_all(" +", " ") %>%
str_replace_all("^ +", "") %>%
str_replace_all(" +$", "")
# Tansforma A'As em A
Nomes <- Nomes %>% str_replace_all("([A-Z])\'\\1", "\\1")
# Remove D's; etc. Se houver barra de espaçõ em seguida, tembem retira.
Nomes <- Nomes %>% str_replace_all("([A-Z])\' ?", "\\1")
# Remove pontos no fim.
# VER CASOS
Nomes <- Nomes %>% str_replace_all("\\.$", "")
# Transforma pontos no meio em barra de espaço
Nomes <- Nomes %>% str_replace_all("([A-Z])(\\.)([A-Z])", "\\1 \\3")
# Letras sozinhas com ponto em letra sozinha apenas
Nomes <- Nomes %>% str_replace_all("( |^)([A-Z])(\\.)( |$)",
"\\1\\2\\4")
# Transformar D AGOSTINHO etc. para DAGOSTINHO
Nomes <- Nomes %>% str_replace_all(" D ([AEIOU])", " D\\1")
# Vale a pena rodar uma função ate este ponto e ver casos remanescentes.
Nomes <- Nomes %>% str_to_title()
# Remove Todas os elementos nao  alfabeticos ou espaco
#     Nomes <- Nomes %>% str_replace_all("[^a-zA-Z0-9, ]","")
}
ANEELCEP <- ANEELCEP %>%
mutate(municipio = OperaNomes(municipio))
View(ANEELCEP)
Cidades <- Cidades<-read.csv("Cidades.csv")
Cidades <- Cidades<-read.csv("./Data/Cidades.csv")
View(Cidades)
ANEELCEP <- readRDS( "./Data/ANEELCEP.RDS") %>%
mutate(potencia_instalada_k_w =
str_replace_all(potencia_instalada_k_w,"\\.","") %>%
str_replace_all(",",".")  %>%
as.numeric())
ANEELCEP <- readRDS( "./Data/ANEELCEP.RDS") %>%
mutate(potencia_instalada_k_w =
str_replace_all(potencia_instalada_k_w,"\\.","") %>%
str_replace_all(",",".")  %>%
as.numeric())
ANEELCEP <- readRDS( "./Data/ANEELCEP.RDS") %>%
mutate(potencia_instalada_k_w =
str_replace_all(potencia_instalada_k_w,"\\.","") %>%
str_replace_all(",",".")  %>%
as.numeric()) %>%
mutate(municipio_padronizado = OperaNomes(municipio))
resto <- anti_join(ANEELCEP, Cidades)
ANEELCEP <- readRDS( "./Data/ANEELCEP.RDS") %>%
mutate(potencia_instalada_k_w =
str_replace_all(potencia_instalada_k_w,"\\.","") %>%
str_replace_all(",",".")  %>%
as.numeric()) %>%
mutate(municipio_padronizado = OperaNomes(municipio))
Cidades <- Cidades<-read.csv("./Data/Cidades.csv") %>%
mutate (municipio_padronizado = OperaNomes(nome_municipio))
resto <- anti_join(ANEELCEP, Cidades)
View(resto)
source('~/2020/FVnoBrasil/Codes/Functions/OperaNomes.R', echo=TRUE)
ANEELCEP <- readRDS( "./Data/ANEELCEP.RDS") %>%
mutate(potencia_instalada_k_w =
str_replace_all(potencia_instalada_k_w,"\\.","") %>%
str_replace_all(",",".")  %>%
as.numeric()) %>%
mutate(municipio_padronizado = OperaNomes(municipio))
Cidades <- Cidades<-read.csv("./Data/Cidades.csv") %>%
mutate (municipio_padronizado = OperaNomes(nome_municipio))
resto <- anti_join(ANEELCEP, Cidades)
View(resto)
View(Cidades)
View(resto)
View(resto)
View(Cidades)
ANEELCEP <- readRDS( "./Data/ANEELCEP.RDS") %>%
mutate(potencia_instalada_k_w =
str_replace_all(potencia_instalada_k_w,"\\.","") %>%
str_replace_all(",",".")  %>%
as.numeric()) %>%
mutate(municipio_padronizado = OperaNomes(municipio))
Cidades <- Cidades<-read.csv("./Data/Cidades.csv") %>%
mutate (municipio_padronizado = OperaNomes(nome_municipio))
View(resto)
source('~/2020/FVnoBrasil/Codes/Functions/OperaNomes.R', echo=TRUE)
ANEELCEP <- readRDS( "./Data/ANEELCEP.RDS") %>%
mutate(potencia_instalada_k_w =
str_replace_all(potencia_instalada_k_w,"\\.","") %>%
str_replace_all(",",".")  %>%
as.numeric()) %>%
mutate(municipio_padronizado = OperaNomes(municipio))
Cidades <- Cidades<-read.csv("./Data/Cidades.csv") %>%
mutate (municipio_padronizado = OperaNomes(nome_municipio))
resto <- anti_join(ANEELCEP, Cidades)
View(resto)
View(resto)
source('~/2020/FVnoBrasil/Codes/Functions/OperaNomes.R', echo=TRUE)
ANEELCEP <- readRDS( "./Data/ANEELCEP.RDS") %>%
mutate(potencia_instalada_k_w =
str_replace_all(potencia_instalada_k_w,"\\.","") %>%
str_replace_all(",",".")  %>%
as.numeric()) %>%
mutate(municipio_padronizado = OperaNomes(municipio))
Cidades <- Cidades<-read.csv("./Data/Cidades.csv") %>%
mutate (municipio_padronizado = OperaNomes(nome_municipio))
resto <- anti_join(ANEELCEP, Cidades)
View(resto)
resto2 <- anti_join(Cidades, ANEELCEP)
resto <- anti_join(ANEELCEP, Cidades)
View(resto2)
View(resto)
view(unique(resto$municipio_padronizado))
source('~/2020/FVnoBrasil/Codes/Functions/OperaNomes.R', echo=TRUE)
ANEELCEP <- readRDS( "./Data/ANEELCEP.RDS") %>%
mutate(potencia_instalada_k_w =
str_replace_all(potencia_instalada_k_w,"\\.","") %>%
str_replace_all(",",".")  %>%
as.numeric()) %>%
mutate(municipio_padronizado = OperaNomes(municipio))
Cidades <- Cidades<-read.csv("./Data/Cidades.csv") %>%
mutate (municipio_padronizado = OperaNomes(nome_municipio))
resto <- anti_join(ANEELCEP, Cidades)
source('~/2020/FVnoBrasil/Codes/Functions/OperaNomes.R', echo=TRUE)
ANEELCEP <- readRDS( "./Data/ANEELCEP.RDS") %>%
mutate(potencia_instalada_k_w =
str_replace_all(potencia_instalada_k_w,"\\.","") %>%
str_replace_all(",",".")  %>%
as.numeric()) %>%
mutate(municipio_padronizado = OperaNomes(municipio))
Cidades <- Cidades<-read.csv("./Data/Cidades.csv") %>%
mutate (municipio_padronizado = OperaNomes(nome_municipio))
resto2 <- anti_join(Cidades, ANEELCEP)
resto <- anti_join(ANEELCEP, Cidades)
View(resto)
view(unique(resto$municipio_padronizado))
view(unique(resto$municipio_padronizado))
source('~/2020/FVnoBrasil/Codes/Functions/OperaNomes.R', echo=TRUE)
ANEELCEP <- readRDS( "./Data/ANEELCEP.RDS") %>%
mutate(potencia_instalada_k_w =
str_replace_all(potencia_instalada_k_w,"\\.","") %>%
str_replace_all(",",".")  %>%
as.numeric()) %>%
mutate(municipio_padronizado = OperaNomes(municipio))
Cidades <- Cidades<-read.csv("./Data/Cidades.csv") %>%
mutate (municipio_padronizado = OperaNomes(nome_municipio))
resto2 <- anti_join(Cidades, ANEELCEP)
resto <- anti_join(ANEELCEP, Cidades)
view(unique(resto$municipio_padronizado))
source('~/2020/FVnoBrasil/Codes/Functions/OperaNomes.R', echo=TRUE)
ANEELCEP <- readRDS( "./Data/ANEELCEP.RDS") %>%
mutate(potencia_instalada_k_w =
str_replace_all(potencia_instalada_k_w,"\\.","") %>%
str_replace_all(",",".")  %>%
as.numeric()) %>%
mutate(municipio_padronizado = OperaNomes(municipio))
Cidades <- Cidades<-read.csv("./Data/Cidades.csv") %>%
mutate (municipio_padronizado = OperaNomes(nome_municipio))
resto2 <- anti_join(Cidades, ANEELCEP)
resto <- anti_join(ANEELCEP, Cidades)
view(unique(resto$municipio_padronizado))
source('~/2020/FVnoBrasil/Codes/Functions/OperaNomes.R', echo=TRUE)
ANEELCEP <- readRDS( "./Data/ANEELCEP.RDS") %>%
mutate(potencia_instalada_k_w =
str_replace_all(potencia_instalada_k_w,"\\.","") %>%
str_replace_all(",",".")  %>%
as.numeric()) %>%
mutate(municipio_padronizado = OperaNomes(municipio))
Cidades <- Cidades<-read.csv("./Data/Cidades.csv") %>%
mutate (municipio_padronizado = OperaNomes(nome_municipio))
resto2 <- anti_join(Cidades, ANEELCEP)
resto <- anti_join(ANEELCEP, Cidades)
view(unique(resto$municipio_padronizado))
view(unique(resto$municipio_padronizado))
source('~/2020/FVnoBrasil/Codes/Functions/OperaNomes.R', echo=TRUE)
ANEELCEP <- readRDS( "./Data/ANEELCEP.RDS") %>%
mutate(potencia_instalada_k_w =
str_replace_all(potencia_instalada_k_w,"\\.","") %>%
str_replace_all(",",".")  %>%
as.numeric()) %>%
mutate(municipio_padronizado = OperaNomes(municipio))
Cidades <- Cidades<-read.csv("./Data/Cidades.csv") %>%
mutate (municipio_padronizado = OperaNomes(nome_municipio))
resto2 <- anti_join(Cidades, ANEELCEP)
resto <- anti_join(ANEELCEP, Cidades)
view(unique(resto$municipio_padronizado))
source('~/2020/FVnoBrasil/Codes/Functions/OperaNomes.R', echo=TRUE)
ANEELCEP <- readRDS( "./Data/ANEELCEP.RDS") %>%
mutate(potencia_instalada_k_w =
str_replace_all(potencia_instalada_k_w,"\\.","") %>%
str_replace_all(",",".")  %>%
as.numeric()) %>%
mutate(municipio_padronizado = OperaNomes(municipio))
Cidades <- Cidades<-read.csv("./Data/Cidades.csv") %>%
mutate (municipio_padronizado = OperaNomes(nome_municipio))
resto2 <- anti_join(Cidades, ANEELCEP)
resto <- anti_join(ANEELCEP, Cidades)
view(unique(resto$municipio_padronizado))
view(unique(resto$municipio_padronizado))
view(unique(resto$municipio_padronizado))
source('~/2020/FVnoBrasil/Codes/Functions/OperaNomes.R', echo=TRUE)
ANEELCEP <- readRDS( "./Data/ANEELCEP.RDS") %>%
mutate(potencia_instalada_k_w =
str_replace_all(potencia_instalada_k_w,"\\.","") %>%
str_replace_all(",",".")  %>%
as.numeric()) %>%
mutate(municipio_padronizado = OperaNomes(municipio))
Cidades <- Cidades<-read.csv("./Data/Cidades.csv") %>%
mutate (municipio_padronizado = OperaNomes(nome_municipio))
resto2 <- anti_join(Cidades, ANEELCEP)
resto <- anti_join(ANEELCEP, Cidades)
view(unique(resto$municipio_padronizado))
View(ANEELCEP)
CidadesLatLong <- ANEELCEP %>% left_join(Cidades)
View(CidadesLatLong)
View(CidadesLatLong)
EstadosLatLong <-CidadesLatLong %>% group_by(uf) %>%
summarise(Pot=sum(Pot,na.rm=T),
latitude=median(latitude,na.rm=T),
longitude=median(longitude,na.rm=T))
View(ANEELCEP)
EstadosLatLong <-CidadesLatLong %>% group_by(uf) %>%
summarise(potencia_instalada=sum(potencia_instalada_k_w,na.rm=T)/1000,
latitude=median(latitude,na.rm=T),
longitude=median(longitude,na.rm=T))
my_map <- LatLongCity %>% leaflet()%>%
addTiles()%>%
addCircles(lat=~latitude,
lng=~latitude,
radius = ~sqrt(potencia_instalada)*1000,
weight = 1,
popup = ~uf)
my_map <- EstadosLatLong %>% leaflet()%>%
addTiles()%>%
addCircles(lat=~latitude,
lng=~latitude,
radius = ~sqrt(potencia_instalada)*1000,
weight = 1,
popup = ~uf)
require("leaflet", quietly = TRUE, warn.conflicts = FALSE)
my_map <- EstadosLatLong %>% leaflet()%>%
addTiles()%>%
addCircles(lat=~latitude,
lng=~latitude,
radius = ~sqrt(potencia_instalada)*1000,
weight = 1,
popup = ~uf)
my_map
my_map <- EstadosLatLong %>% leaflet()%>%
addTiles()%>%
addCircles(lat=~latitude,
lng=~longitude,
radius = ~sqrt(potencia_instalada)*1000,
weight = 1,
popup = ~uf)
my_map
my_map <- EstadosLatLong %>% leaflet()%>%
addTiles()%>%
addCircles(lat=~latitude,
lng=~longitude,
radius = ~sqrt(potencia_instalada)*1000000,
weight = 1,
popup = ~uf)
my_map
my_map <- EstadosLatLong %>% leaflet()%>%
addTiles()%>%
addCircles(lat=~latitude,
lng=~longitude,
radius = ~sqrt(potencia_instalada)*10000,
weight = 1,
popup = ~uf)
my_map
?addCircles
my_map <- EstadosLatLong %>% leaflet()%>%
addTiles()%>%
addCircles(lat=~latitude,
lng=~longitude,
radius = ~sqrt(potencia_instalada)*10000,
weight = 1,
popup = ~uf + potencia_instalada)
my_map <- EstadosLatLong %>% leaflet()%>%
addTiles()%>%
addCircles(lat=~latitude,
lng=~longitude,
radius = ~sqrt(potencia_instalada)*100000,
weight = 1,
popup = ~uf)
my_map
my_map <- EstadosLatLong %>% leaflet()%>%
addTiles()%>%
addCircles(lat=~latitude,
lng=~longitude,
radius = ~sqrt(potencia_instalada)*10000,
weight = 1,
popup = ~uf)
my_map
CidadesLatLong <- ANEELCEP %>% left_join(Cidades)
EstadosLatLong <-CidadesLatLong %>% group_by(uf) %>%
summarise(potencia_instalada=sum(potencia_instalada_k_w,na.rm=T)/1000,
latitude=median(latitude,na.rm=T),
longitude=median(longitude,na.rm=T))
my_map <- EstadosLatLong %>% leaflet()%>%
addTiles()%>%
addCircles(lat=~latitude,
lng=~longitude,
radius = ~sqrt(potencia_instalada)*10000,
weight = 1,
popup = ~uf)
my_map
CidadesLatLong <- ANEELCEP %>%
filter (tipo =="UFV" & classe == 'Residencial') %>%
left_join(Cidades)
EstadosLatLong <-CidadesLatLong %>% group_by(uf) %>%
summarise(potencia_instalada=sum(potencia_instalada_k_w,na.rm=T)/1000,
latitude=median(latitude,na.rm=T),
longitude=median(longitude,na.rm=T),
n_sistemas = n())
my_map <- EstadosLatLong %>% leaflet()%>%
addTiles()%>%
addCircles(lat=~latitude,
lng=~longitude,
radius = ~sqrt(potencia_instalada)*10000,
weight = 1,
popup = ~uf)
my_map
my_map <- EstadosLatLong %>% leaflet()%>%
addTiles()%>%
addCircles(lat=~latitude,
lng=~longitude,
radius = ~sqrt(potencia_instalada)*50000,
weight = 1,
popup = ~uf)
my_map
my_map <- EstadosLatLong %>% leaflet()%>%
addTiles()%>%
addCircles(lat=~latitude,
lng=~longitude,
radius = ~sqrt(potencia_instalada)*20000,
weight = 1,
popup = ~uf)
my_map
View(CidadesLatLong)
my_map <- DadosLatLong %>% leaflet()%>%
addTiles()%>%
addMarkers(lat=LatLong$latitude,
lng=LatLong$longitude,
clusterOptions=markerClusterOptions())
my_map <- CidadesLatLong %>% leaflet()%>%
addTiles()%>%
addMarkers(lat=LatLong$latitude,
lng=LatLong$longitude,
clusterOptions=markerClusterOptions())
my_map <- CidadesLatLong %>% leaflet()%>%
addTiles()%>%
addMarkers(lat=~latitude,
lng=~ongitude,
clusterOptions=markerClusterOptions())
my_map <- CidadesLatLong %>% leaflet()%>%
addTiles()%>%
addMarkers(lat=~latitude,
lng=~longitude,
clusterOptions=markerClusterOptions())
my_map
source("./Code/Functions/OperaNomes.R")
source("./Codes/Functions/OperaNomes.R")
source("./Codes/Functions/OperaNomes.R")
Cidades <- ANEELCEP %>% filter(tipo =="UFV" & classe == 'Residencial') %>%
group_by(municipio, uf) %>%
summarise(unidades_instaladas = n(),
potencia_instalada = sum(potencia_instalada_k_w)/1000,
) %>%
arrange(desc(unidades_instaladas)) %>%
top_n(10, unidades_instaladas)
knitr::kable(Cidades)
Cidades <- ANEELCEP %>% filter(tipo =="UFV" & classe == 'Residencial') %>%
group_by(municipio, uf) %>%
summarise(unidades_instaladas = n(),
potencia_instalada = sum(potencia_instalada_k_w)/1000,
) %>%
arrange(desc(unidades_instaladas)) %>%
top_n(10, unidades_instaladas)
Cidades <- ANEELCEP %>% filter(tipo =="UFV" & classe == 'Residencial') %>%
group_by(municipio, uf) %>%
summarise(unidades_instaladas = n(),
potencia_instalada = sum(potencia_instalada_k_w)/1000,
) %>%
arrange(desc(unidades_instaladas)) %>%
top_n(10, unidades_instaladas)
View(Cidades)
?top_n
Cidades <- ANEELCEP %>% filter(tipo =="UFV" & classe == 'Residencial') %>%
group_by(municipio, uf) %>%
summarise(unidades_instaladas = n(),
potencia_instalada = sum(potencia_instalada_k_w)/1000,
) %>%
arrange(desc(unidades_instaladas)) %>%
knitr::kable(head(Cidades))
head(Cidades)
Cidades <- ANEELCEP %>% filter(tipo =="UFV" & classe == 'Residencial') %>%
group_by(municipio, uf) %>%
summarise(unidades_instaladas = n(),
potencia_instalada = sum(potencia_instalada_k_w)/1000,
) %>%
arrange(desc(unidades_instaladas)) %>%
knitr::kable((Cidades))
Cidades <- ANEELCEP %>% filter(tipo =="UFV" & classe == 'Residencial') %>%
group_by(municipio, uf) %>%
summarise(unidades_instaladas = n(),
potencia_instalada = sum(potencia_instalada_k_w)/1000,
) %>%
arrange(desc(unidades_instaladas))
knitr::kable(head(Cidades))
knitr::kable(head(Cidades, 10))
knitr::kable(head(Cidades, 15))
